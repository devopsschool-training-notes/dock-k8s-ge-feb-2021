Kubernetes Artchitecture: Summary
====================================
Master
----------------
- API Server 		-> POD -> Container -> Image -> Google Registry
- ETCD			-> POD -> Container -> Image -> Google Registry
- Controller Mgr	-> POD -> Container -> Image -> Google Registry
- Schedular		-> POD -> Container -> Image -> Google Registry

- Kubelet	- TOOL@NODE
- Docker	- TOOL@NODE
- Kubectl	- TOOL@NODE
- kubeadm	- TOOL@NODE	$ kubeadm init
- Kube Proxy	-> POD -> Container -> Image -> Google Registry
		NETWORK DRIVER - NETWORK POLICY
		- overway - weavenet POD -> Container -> Image -> Google Registry
	
Worker
----------------
- Kubelet	- TOOL@NODE
- Docker	- TOOL@NODE
- Kubectl	- TOOL@NODE
- kubeadm	- TOOL@NODE	$ kubeadm join
- Kube Proxy	-> POD -> Container -> Image -> Google Registry
		NETWORK DRIVER - NETWORK POLICY
		- overlay - weavenet POD -> Container -> Image -> Google Registry

How to setup K8s Clustor?
-----------------------------------
DEV & Learning
	- minikube.exe start
		- PUll ONE VM Image
		- RUN THAT IMAGE WITH VirtualBox
		- IN that image - it would setup ONE NODE k8s clustor
		
	
PROD - 40+
Manual - Administrate k8s clustor
- Kubeadm Manual way	-- PART OF SESSION
- KOPS - Manual way with a integration with Cloud Services
Outsource - Administrate k8s clustor
- AWS --> EKS
- AZURE --> AKS
- GoogleCloud --> GKE

Workstation
----------------
- Kubectl



How to setup K8s Clustor using Kubeadm in Production?
-----------------------------------
Master + Workstation - 65.0.21.204
User - centos
Pass - centos123

Worker - 13.233.193.247

https://www.devopsschool.com/blog/setting-up-kubernetes-clusters-using-kubeadm-manual-way-in-rhel-7-centos7/

===================== To Setup WorkStation==========================
To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

===================== To Pod Netowkring Driver ==========================
You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

===================== For k8s Worker ==========================

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.2.142:6443 --token whv5g6.60pw7r793q9ogt3n \
    --discovery-token-ca-cert-hash sha256:e129ae01ef287ae3826a5e915f374d97b0d73989fa213d8b21dbd29b7858bb22
=====================================================================================
How kubectl (workstation) connect to API SERVER?
---------------------------------------------------------
kubectl 		
	Read  ONE YAML file - Called "config"
	$USER_HOME/.kube/config

What is the content of "config"?
----------------
Clustor(S):
	Clustor1: http://10.4.5.6:6443
	Clustor2: http://10.4.5.4:6443
	Clustor3: http://10.4.3.4:6443
User(s)
	User1: key + cert
	User2: key + cert
	User3: key + cert
Context(S)
	Context1: Clustor1 + User2
	Context2: Clustor2 + User3
	Context3: Clustor3 + User1
curr-context:
	Context2	
=======================================

[centos@ip-172-31-2-142 ~]$ kubectl
kubectl controls the Kubernetes cluster manager.

 Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/

Basic Commands (Beginner):
  create        Create a resource from a file or from stdin.
  expose        Take a replication controller, service, deployment or pod and expose it as a new
Kubernetes Service
  run           Run a particular image on the cluster
  set           Set specific features on objects

Basic Commands (Intermediate):
  explain       Documentation of resources
  get           Display one or many resources
  edit          Edit a resource on the server
  delete        Delete resources by filenames, stdin, resources and names, or by resources and label
selector

Deploy Commands:
  rollout       Manage the rollout of a resource
  scale         Set a new size for a Deployment, ReplicaSet or Replication Controller
  autoscale     Auto-scale a Deployment, ReplicaSet, or ReplicationController

Cluster Management Commands:
  certificate   Modify certificate resources.
  cluster-info  Display cluster info
  top           Display Resource (CPU/Memory/Storage) usage.
  cordon        Mark node as unschedulable
  uncordon      Mark node as schedulable
  drain         Drain node in preparation for maintenance
  taint         Update the taints on one or more nodes

Troubleshooting and Debugging Commands:
  describe      Show details of a specific resource or group of resources
  logs          Print the logs for a container in a pod
  attach        Attach to a running container
  exec          Execute a command in a container
  port-forward  Forward one or more local ports to a pod
  proxy         Run a proxy to the Kubernetes API server
  cp            Copy files and directories to and from containers.
  auth          Inspect authorization
  debug         Create debugging sessions for troubleshooting workloads and nodes

Advanced Commands:
  diff          Diff live version against would-be applied version
  apply         Apply a configuration to a resource by filename or stdin
  patch         Update field(s) of a resource
  replace       Replace a resource by filename or stdin
  wait          Experimental: Wait for a specific condition on one or many resources.
  kustomize     Build a kustomization target from a directory or a remote url.

Settings Commands:
  label         Update the labels on a resource
  annotate      Update the annotations on a resource
  completion    Output shell completion code for the specified shell (bash or zsh)

Other Commands:
  api-resources Print the supported API resources on the server
  api-versions  Print the supported API versions on the server, in the form of "group/version"
  config        Modify kubeconfig files
  plugin        Provides utilities for interacting with plugins.
  version       Print the client and server version information

Usage:
  kubectl [flags] [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).
---------------------------

 17  kubectl get nodes
   18  clear
   19  cd
   20  pwd
   21  ls -la
   22  ls .kube/
   23  more .kube/config
   24  clear
   25  kubectl config view
   26  clear
   27  kubectl
   28  kubectl cluster-info
   29  kubectl cluster-info dump
   30  clear
   31  kubectl cluster-info
   32  kubectl
   33  clear
   34  kubectl version
   35  kubectl
   36  kubectl config -h
   37  kubectl config get-clusters
   38  kubectl config get-contexts
   39  kubectl configget-users
   40  kubectl config get-users
   41  clear
   42  kubectl
   43  clear
   44  kubectl get nodes
   45  kubectl get pods --all-namespaces
   46  clear
   47  history

---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
What is your Desire?
=============================




[centos@ip-172-31-2-142 ~]$ clear
[centos@ip-172-31-2-142 ~]$ kubectl api-resources
NAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND
bindings                                       v1                                     true         Binding
componentstatuses                 cs           v1                                     false        ComponentStatus
configmaps                        cm           v1                                     true         ConfigMap
endpoints                         ep           v1                                     true         Endpoints
events                            ev           v1                                     true         Event
limitranges                       limits       v1                                     true         LimitRange
namespaces                        ns           v1                                     false        Namespace
nodes                             no           v1                                     false        Node
persistentvolumeclaims            pvc          v1                                     true         PersistentVolumeClaim
persistentvolumes                 pv           v1                                     false        PersistentVolume
pods                              po           v1                                     true         Pod
podtemplates                                   v1                                     true         PodTemplate
replicationcontrollers            rc           v1                                     true         ReplicationController
resourcequotas                    quota        v1                                     true         ResourceQuota
secrets                                        v1                                     true         Secret
serviceaccounts                   sa           v1                                     true         ServiceAccount
services                          svc          v1                                     true         Service
mutatingwebhookconfigurations                  admissionregistration.k8s.io/v1        false        MutatingWebhookConfiguration
validatingwebhookconfigurations                admissionregistration.k8s.io/v1        false        ValidatingWebhookConfiguration
customresourcedefinitions         crd,crds     apiextensions.k8s.io/v1                false        CustomResourceDefinition
apiservices                                    apiregistration.k8s.io/v1              false        APIService
controllerrevisions                            apps/v1                                true         ControllerRevision
daemonsets                        ds           apps/v1                                true         DaemonSet
deployments                       deploy       apps/v1                                true         Deployment
replicasets                       rs           apps/v1                                true         ReplicaSet
statefulsets                      sts          apps/v1                                true         StatefulSet
tokenreviews                                   authentication.k8s.io/v1               false        TokenReview
localsubjectaccessreviews                      authorization.k8s.io/v1                true         LocalSubjectAccessReview
selfsubjectaccessreviews                       authorization.k8s.io/v1                false        SelfSubjectAccessReview
selfsubjectrulesreviews                        authorization.k8s.io/v1                false        SelfSubjectRulesReview
subjectaccessreviews                           authorization.k8s.io/v1                false        SubjectAccessReview
horizontalpodautoscalers          hpa          autoscaling/v1                         true         HorizontalPodAutoscaler
cronjobs                          cj           batch/v1beta1                          true         CronJob
jobs                                           batch/v1                               true         Job
certificatesigningrequests        csr          certificates.k8s.io/v1                 false        CertificateSigningRequest
leases                                         coordination.k8s.io/v1                 true         Lease
endpointslices                                 discovery.k8s.io/v1beta1               true         EndpointSlice
events                            ev           events.k8s.io/v1                       true         Event
ingresses                         ing          extensions/v1beta1                     true         Ingress
flowschemas                                    flowcontrol.apiserver.k8s.io/v1beta1   false        FlowSchema
prioritylevelconfigurations                    flowcontrol.apiserver.k8s.io/v1beta1   false        PriorityLevelConfiguration
ingressclasses                                 networking.k8s.io/v1                   false        IngressClass
ingresses                         ing          networking.k8s.io/v1                   true         Ingress
networkpolicies                   netpol       networking.k8s.io/v1                   true         NetworkPolicy
runtimeclasses                                 node.k8s.io/v1                         false        RuntimeClass
poddisruptionbudgets              pdb          policy/v1beta1                         true         PodDisruptionBudget
podsecuritypolicies               psp          policy/v1beta1                         false        PodSecurityPolicy
clusterrolebindings                            rbac.authorization.k8s.io/v1           false        ClusterRoleBinding
clusterroles                                   rbac.authorization.k8s.io/v1           false        ClusterRole
rolebindings                                   rbac.authorization.k8s.io/v1           true         RoleBinding
roles                                          rbac.authorization.k8s.io/v1           true         Role
priorityclasses                   pc           scheduling.k8s.io/v1                   false        PriorityClass
csidrivers                                     storage.k8s.io/v1                      false        CSIDriver
csinodes                                       storage.k8s.io/v1                      false        CSINode
storageclasses                    sc           storage.k8s.io/v1                      false        StorageClass
volumeattachments                              storage.k8s.io/v1                      false        VolumeAttachment


[centos@ip-172-31-2-142 ~]$ kubectl api-versions
admissionregistration.k8s.io/v1
admissionregistration.k8s.io/v1beta1
apiextensions.k8s.io/v1
apiextensions.k8s.io/v1beta1
apiregistration.k8s.io/v1
apiregistration.k8s.io/v1beta1
apps/v1
authentication.k8s.io/v1
authentication.k8s.io/v1beta1
authorization.k8s.io/v1
authorization.k8s.io/v1beta1
autoscaling/v1
autoscaling/v2beta1
autoscaling/v2beta2
batch/v1
batch/v1beta1
certificates.k8s.io/v1
certificates.k8s.io/v1beta1
coordination.k8s.io/v1
coordination.k8s.io/v1beta1
discovery.k8s.io/v1beta1
events.k8s.io/v1
events.k8s.io/v1beta1
extensions/v1beta1
flowcontrol.apiserver.k8s.io/v1beta1
networking.k8s.io/v1
networking.k8s.io/v1beta1
node.k8s.io/v1
node.k8s.io/v1beta1
policy/v1beta1
rbac.authorization.k8s.io/v1
rbac.authorization.k8s.io/v1beta1
scheduling.k8s.io/v1
scheduling.k8s.io/v1beta1
storage.k8s.io/v1
storage.k8s.io/v1beta1
v1




What is your desire?
==============================
- NameSpace
- Pod
- ReplicationController
- Deployment
- Services	
- RBAC		5 
- Storage	- 6 
===================
CRUD
	
CREATE 	POST
READ	GET
UPDATE	PUT
DELETE	DELETE
-----------------
	VERB


Working with Namespace?
==============================
CREATE 
	CMD
		create
	YAML
		create -f yaml
READ
	CMD	
		get
	YAML
UPDATE
	CMD
		edit
	YAML
		apply -f yaml
DELETE
	CMD
		delete
	YAML
		delete -f yaml



  48  clear
   49  sudo -s
   50  kubectl version
   51  kubectl get nodes
   52  kubectl cluster-info
   53  clear
   54  history
   55  clear
   56  more .kube/config
   57  clear
   58  kubectl
   59  kubectl api-resources
   60  clear
   61  kubectl api-resources
   62  clear
   63  kubectl api-resources
   64  kubectl api-resources | wc -l
   65  clear
   66  kubectl api-resources
   67  clear
   68  kubectl
   69  clear
   70  kubectl api-versions
   71  kubectl get ns
   72  clear
   73  kubectl
   74  clear
   75  kubectl get ns
   76  kubectl create -h
   77  clesr
   78  clear
   79  kubectl create namespace -h
   80  clear
   81  kubectl create namespace dev
   82  kubectl create namespace qa
   83  kubectl get ns
   84  kubectl edit ns dev
   85  kubectl delete ns qa
   86  kubectl get ns
   87  history

==================================================================================
==================================================================================
pod.yaml
-------------------
apiVersion: v1
kind: Pod
metadata:
  name: hello-pod
  labels: 
    app: webserver
spec:
  containers:
  - name: hello-ctr
    image: nginx
    ports:
    - containerPort: 80
=======================
rajesh@devopsschool.com
=======================

 140  vi pod.yaml
  141  kubectl create -f pod.yaml -n=rajesh
  142  kubectl get pods -n=rajesh
  143  kubectl get pods
  144  kubectl create -f pod.yaml -n=rajesh
  145  kubectl create -f pod.yaml
  146  clear
  147  kubectl get pods
  148  kubectl get pods -n=rajesh
  149  clear
  150  kubectl get pods -n=rajesh
  151  kubectl edit pod hello-pod -n=rajesh
  152  kubectl get pods -n=rajesh
  153  kubectl get pods -n=rajesh --show-lables
  154  kubectl get pods -n=rajesh --show-labels
  155  vi pod.yaml
  156  kubectl apply -f pod.yaml -n=rajesh
  157  kubectl get pods -n=rajesh --show-labels
  158  clear
  159  kubectl get pods
  160  kubectl delete pod hello-pod
  161  kubctl delete -f pod.yaml -n=rajesh
  162  kubectl delete -f pod.yaml -n=rajesh
  163  kubctl get pods
  164  kubectl get pods
  165  kubectl get pods -n=rajesh

=========================================
Deep Dive into the POD
How to use the pod?
How to debug a pod?
=============================================

Troubleshooting and Debugging Commands:
  describe      Show details of a specific resource or group of resources
  logs          Print the logs for a container in a pod
  attach        Attach to a running container
  exec          Execute a command in a container
  port-forward  Forward one or more local ports to a pod
  cp            Copy files and directories to and from containers.
  auth          Inspect authorization
  debug         Create debugging sessions for troubleshooting workloads and nodes

kubectl port-forward pod/hello-pod 8888:80 -n=rajesh

kubectl port-forward --address 0.0.0.0 pod/hello-pod 8888:80 -n=rajesh

 166  history
  167  clear
  168  kubectl
  169  clear
  170  kubectl apply -f pod.yaml -n=rajesh
  171  kubectl get pods -n=rajesh
  172  kubectl get pods -n=rajesh -o wide
  173  kubectl describe pod hello-pod -n=rajesh
  174  clear
  175  kubectl describe pod hello-pod -n=rajesh
  176  clear
  177  kubectl describe pod hello-pod -n=rajesh
  178  clear
  179  ls
  180  kubectl describe ns rajesh
  181  clear
  182  kubectl get pods -n=rajesh
  183  kubectl logs hello-pod
  184  kubectl logs hello-pod -n=rajesh
  185  kubectl get pods -n=rajesh -o wide
  186  watch kubectl logs hello-pod -n=rajesh
  187  clear
  188  kubectl logs -h
  189  clear
  190  kubectl get pods -n=rajesh
  191  kubectl attach hello-pod
  192  kubectl attach hello-pod -n=rajesh
  193  clear
  194  kubectl get pods -n=rajesh
  195  kubectl exec hello-pod -n=rajesh ls
  196  clear
  197  kubectl exec -it hello-pod -n=rajesh /bin/bash
  198  clear
  199  kubectl get pods -n=rajesh -o wide
  200  kubectl port-forward -h
  201  clear
  202  kubectl get pods -n=rajesh -o wide
  203  clear
  204  kubectl port-forward pod/hello-pod 8888:80 -n=rajesh
  205  kubectl port-forward -h
  206  clear
  207  kubectl port-forward --address 0.0.0.0 pod/hello-pod 8888:80 -n=rajesh
  208  clear
  209  ls
  210  kubectl cp pod.yaml hello-pod:/tmp -n=rajesh
  211  kubectl exec hello-pod ls /tmp
  212  kubectl exec hello-pod ls /tmp -n=rajesh
  213  kubectl auth
  214  kubectl auth can-i create pod
  215  kubectl auth can-i delete pod
  216  clear
  217  kubectl auth can-i delete ns
  218  kubectl auth can-i create ns
  219  kubectl auth can-i create deploy
  220  kubectl debug -h
  221  history









