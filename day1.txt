1234567890
=============================
Rajesh Kumar
============
Docker - 2 Days
Kubernetes - 3 Days
--------------
Start - 9 AM IST
End - 5 PM IST
=========================
LUNCH - 1 PM - 2 PM
2 TEA BREAK - 
		11 AM - 15 - 20 mins
		3.30 PM IST
-----------------------------
Demo + Lab === AWS
============================
==============================================
What is Docker?
----------------
Container mgmt tool
Release
	Enterprise  	- PAID
	Community	- FREE
Written in golang
by Soloman Hykes
Release
	20.X

Other Container mgmt tool
-==================================
https://www.devopsschool.com/blog/list-of-top-container-runtime-interface-projects/

Tool
- Saving a Cost
- Save a time
- Impro Quality | Eff*
--------------------
	FOR RUNNING YOUR APP in DataCenter | Dev | QA | PROD

What is Container?
========================================================================
- A lightweight fully independent APP run time env

- a allocation of 
	ONE NET
	ONE PID
	ONE RFS(MNT) to (Comes from Image)
		EACH USER
=============================
	FOr running app inde* and Cheaper and faster



How APPS RUN?
What are the components needed to RUN app?
========================================================================
========================================================================
HARDWARE
	OS
	  Kernal			NEED		ALLOWED by OS		CAN
		Namespace
			USER		1		MUL			MUL
			RFS AKA MNT	1		1			MUL	
			PID		1		1			MUL
			NET		1		1			MUL
		Cgroups
	
		Capabilties
			Decide ROOT or NOT ROOT

		 USER	

			JAVA
				TOMCAT
					APP


What is kernel?
The kernel is a computer program at the core of a computer's operating system that has complete
                ---------------- 
control over everything in the system.

Cgroup
cgroups (abbreviated from control groups) is a Linux kernel feature that limits, accounts for, and isolates the resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes.

Filesystem
-------------------
- collections of file & dir for SPECFIC purpose

TYPE
- BOOTFS == KERNAL
- ROOTFS
- APPFS
- USERFS

WHY OS not allowed for Multiple PID - NET - MNT?
========================================================
PC
	Personal Computing


How to run APPS in Datacenter? (Internet based)
		- Cheaper
		- faster
		- Better

Evolution of Computing
==================================================
Before 2000s
--------------------------------------------------
PHYSiCAL		Virtual	
	

=========================================================================================
Docker Architecture AKA How Docker Works!!!
---------------------------------------------
Human => Docker client -----REST API----> Docker Server -----> ContainerD ---> Kernal
        =================================================
			Docker Engine       


Docker Components
=========================================
1. Docker Engine

2. Docker Image = ROOTFS + USERFS + APPFS
			ubuntu = rfs + ufs
			centos = rfs + ufs
			jenkins = rfs + ufs + java + jenkins


Vms Image = BOOTFS + 	ROOTFS + USERFS + APPFS
	    (LINUX KER)	ubuntu   root
  	    (WIN KER)   win2019  administrator

	- ONE COPY of Docker Image GET MOUNTED TO EACH USER aka container
	- From One image you can create multiple container.

3. Registry
	contains
		repository
			contains 
				version of filesystem
				=== ROOTFS 
				===+ USERFS 
				===+ APPFS
			=============================
				image
	Public
		hub.docker.com
		google registry

	Pvt
		artifactory
		nexus

4. Docker Container 


	HUMAN --> CLIENT --> SERVER --> CONTAINERD --> KERNAL
	
	Create ONE NETWORK
	CREATE ONE PID
	CREATE ONE MOUNT using DOCKER IMAGE
	&&&
	Create ONE USER
	&&&& ATTACH
		NETWORK
		PID
		MOUNT 
			to the USER
======================================================================================
Docker Workflow?
=====================================================
Human -> Client -> Server
			CHECK if Image Exist in Local
			YES -  ContainerD --> Kernal
			NO - DOWNLOAD form hub ->  ContainerD --> Kernal

Container Lifecyle
-----------------------------
Create -> Start -> STOP -> Start -> Restart -> Pause --> Unpause -> KILL -> remove

VMs LifeCycle
------------------------------
Create -> Start -> STOP -> Start -> Restart -> Pause --> Unpause -> KILL -> remove


How to Install Docker?
https://www.devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html

   1  vi /etc/ssh/sshd_config
    2  passwd centos
    3  systemctl restart sshd
    4  sudo yum install -y yum-utils device-mapper-persistent-data lvm2
    5  sudo yum install -y yum-utils device-mapper-persistent-data lvm2
    6  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    7  clear
    8  sudo yum install â€“y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    9  sudo yum-config-manager --enable rhui-REGION-rhel-server-extras
   10  sudo yum install -y docker-ce
   11  docker -v
   12  sudo systemctl enable docker
   13  sudo systemctl start docker
   14  docker info
   15  clear
   16  which docker
   17  ps -eaf | grep docker
   18  which containerd
   19  history

=====
DOCKER NEED ROOT to send a command
or
USER need to be part of group called "docker"
======================================
Lab & Demo 
---------------
3.7.45.18
UserName - centos
Password - centos123

 16  which docker
   17  ps -eaf | grep docker
   18  which containerd
   19  history
   20  clea r
   21  clear
   22  docker version
   23  docker help
   24  docker help attach
   25  clear
   26  docker ps -a
   27  docker ps
   28  docker images
   29  docker pull jenkins/jenkins
   30  docker images
   31  clear
   32  docker images
   33  docker create jenkins/jenkins
   34  docker ps
   35  docker ps -a
   36  docker create --name=jenkins1 jenkins/jenkins
   37  docker ps -a
   38  docker create --name=jenkins1 jenkins/jenkins
   39  docker create --name=jenkins2 jenkins/jenkins
   40  docker ps -a
   41  clear
   42  docker ps -a
   43  docker start 8664b1b14131
   44  docker ps -a
   45  docker start 9cac69f67899
   46  docker ps -a
   47  clear
   48  docker ps
   49* docker stop 8664b1b1413
   50  docker ps -a
   51  docker start 8664b1b14131
   52  docker ps -a
   53  clear
   54  docker ps -a
   55  docker restart 8664b1b14131 9cac69f67899
   56  docker ps -a
   57  clear
   58  docker pause 8664b1b14131
   59  docker ps -a
   60  docker unpause 8664b1b14131
   61  docker ps -a
   62  docker kill 8664b1b14131
   63  docker ps -a
   64  clear
   65  docker ps -a
   66  docker rm 8664b1b14131
   67  docker rm 9cac69f67899
   68  history


Assignment
----------------------
Stop Vs Kill
Pause Vs Unpause

===========================================================

What is containers.


	HUMAN --> CLIENT --> SERVER --> CONTAINERD --> KERNAL
	
	Create ONE NETWORK
	CREATE ONE PID
	CREATE ONE MOUNT using DOCKER IMAGE
	&&&
	Create ONE USER
	&&&& ATTACH
		NETWORK
		PID
		MOUNT 
			to the USER


   71  docker ps -a
   72  docker stop 9cac69f67899 1cd619d244a9
   73  docker rm 9cac69f67899 1cd619d244a9
   74  clear
   75  docker [s
   76  docker ps
   77  clear
   78  ps
   79  ps -eaf | grep 8876
   80  ps -eaf | grep 8874
   81  ps -eaf | grep 8830
   82  ps -eaf | grep 8829
   83  ps -eaf | grep 8825
   84  ps -eaf | grep 8824
   85  clear
   86  ps -eaf
   87  clear
   88  docker ps
   89  ps -eaf | grep docker
   90  ps -eaf | grep containerd
   91  clear
   92  id
   93  docker ps
   94  docker exec -it 5ddf0823c4c2 /bin/bash
   95  clear
   96  docker exec -it 5ddf0823c4c2 /bin/bash
   97  clear
   98  dcoker
   99  docker ps
  100  docker inspect 5ddf0823c4c2
  101  clear
  102  docker ps
  103  docker exec 5ddf0823c4c2 df -kh
  104  docker exec 7f3433ff50bc df -kh
  105  docker exec 7f3433ff50bc touch /tmp/rajesh.txt
  106  docker exec 7f3433ff50bc ls /tmp/
  107  docker exec 5ddf0823c4c2 ls /tmp/
  108  docker exec 5ddf0823c4c2 ls /
  109  hisotyr
  110  history
============================================

How to use Container?
=============================

RUN
-------------------------------------
Pull -> Create -> Start -> Become a Container(Attached to a Container PID1)

RUN -d
-------------------------------------
Pull -> Create -> Start -> DO NOT Become a Container(DO NoT Attached to a Container PID1)

 111  clear
  112  ls
  113  docker ps
  114  docker stop ecff8d43aab3 06cdfe686a78 5ddf0823c4c2 7f3433ff50bc
  115  docker rm ecff8d43aab3 06cdfe686a78 5ddf0823c4c2 7f3433ff50bc
  116  clear
  117  docker ps
  118  docker run jenkins/jenkins
  119  clear
  120  docker ps
  121  docker run -d jenkins/jenkins
  122  docker ps
  123  docker run -d jenkins/jenkins
  124  docker ps
  125  docker run -d jenkins/jenkins
  126  docker ps
  127  clear
  128  docker ps
  129  docker exec -it 7223876d0257 /bin/bash
  130  docker ps
  131  docker run jenkins/jenkins
  132  docker ps
  133  history



Physical Server		Virutal Server		Container is running
is running		is running
As long as 		As long as 		As long as
PID 1 is running	PID 1 is running	PID 1 is running	
		
PID 1 is SYSTEMD	PID 1 is SYSTEMD	PID 1 can be anything'
						java
						perl
						python
						/bin/bash
						/bin/tini
						a
						b
						c
						
As long as "anything" container is running.	

==================================================================
How to go inside a container?

exec
	it would execute any executable inside a container
	but using -it and /bin/bash - you can inside


attach
	using attach you can attach to a process of PID1


IF you attach to PID1 which is SHELL - you can deattach using
Control + P + Q


How to access a container from outside?

docker run -d -p 8080:8080 jenkins/jenkins
docker run -d -p 8090:8080 jenkins/jenkins

8090:8080
nodeport:containerport




 1  vi /etc/ssh/sshd_config
    2  passwd centos
    3  systemctl restart sshd
    4  clear
    5  docker ps
    6  docker exec 2541cbe2ce09 ps -eaf
    7  clear
    8  ps -eaf
    9  clear
   10  docker run ubuntu
   11  docker ps
   12  docker ps -a
   13  /bin/bash
   14  clear
   15  docker ps -a
   16  ls
   17  clear
   18  docker run ubuntu ls
   19  docker ps -a
   20  clear
   21  docker run centos
   22  docker ps
   23  docker ps -a
   24  clear
   25  clear
   26  docker ps
   27  docker exec 2752b838c800 ls
   28  docker exec 2752b838c800 df -kh
   29  clear
   30  docker exec 2752b838c800 free
   31  docker exec 2752b838c800 fgh
   32  fgh
   33  docker exec -it 2752b838c800 /bin/bash
   34  docker ps
   35  docker attach 2752b838c800
   36  docker ps
   37  clear
   38  docker ps
   39  docker run -it ubuntu
   40  docker ps
   41  docker attach 7abe6e55aeb4
   42  docker ps -a
   43  clear
   44  docker run -itd ubuntu
   45  docker ps
   46  docker ps
   47  docker run -itd ubuntu
   48  docker ps
   49  docker run -d jenkins
   50  docker run -d jenkins/jenkins
   51  docker ps
   52  clear
   53  docker ps
   54  docker inspect a34b1f06a8c2
   55  clear
   56  ping 172.17.0.5
   57  curl http://172.17.0.5:8080
   58  clear
   59  clear
   60  docker run -d -p 8080:8080 jenkins/jenkins
   61  docker ps
   62  docker run -d -p 8090:8080 jenkins/jenkins
   63  docker run -d -p 8080:8080 jenkins/jenkins
   64  history












